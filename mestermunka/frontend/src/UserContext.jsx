import { createContext, useState, useEffect } from "react";
import Axios from "axios";

export const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  // Felhaszn√°l√≥i adatok lek√©r√©se csak akkor, ha van √©rv√©nyes munkamenet
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const storedUserID = localStorage.getItem("userID");
        if (storedUserID) { // Ellen≈ërizz√ºk, hogy van-e mentett userID
          const response = await Axios.get("http://localhost:5020/profile", {
            withCredentials: true,
          });
          if (response.data.success) {
            setUser(response.data.user);
            console.log("üîµ Lek√©rt felhaszn√°l√≥ adatok (UserContext):", response.data.user);
          } else {
            setUser(null);
            localStorage.removeItem("userID"); // Ha a szerver szerint nincs munkamenet, t√∂r√∂lj√ºk
            console.log("üî¥ Nincs √©rv√©nyes munkamenet, user null√°zva");
          }
        }
      } catch (error) {
        console.error("Nem siker√ºlt lek√©rni a felhaszn√°l√≥i adatokat:", error);
        setUser(null);
        localStorage.removeItem("userID"); // Hiba eset√©n is t√∂r√∂lj√ºk
      }
    };

    fetchUser();
  }, []); // Csak egyszer fut le indul√°skor

  // Bejelentkez√©s kezel≈ë f√ºggv√©ny
  const loginUser = async (userData) => {
    try {
      // Felt√©telezz√ºk, hogy a userData-ban van egy ID vagy m√°s azonos√≠t√≥
      setUser(userData);
      localStorage.setItem("userID", userData.id || userData.felhasznalonev); // ID vagy felhaszn√°l√≥n√©v ment√©se
      console.log("üü¢ Bejelentkezett user:", userData);

      // Ellen≈ërz√©sk√©ppen lek√©rj√ºk a teljes profilt
      const response = await Axios.get("http://localhost:5020/profile", {
        withCredentials: true,
      });
      if (response.data.success) {
        setUser(response.data.user); // Friss√≠tj√ºk a teljes profillal
        console.log("üîµ Profil friss√≠tve bejelentkez√©skor:", response.data.user);
      }
    } catch (error) {
      console.error("Hiba a bejelentkez√©s k√∂zbeni profil lek√©r√©sekor:", error);
      setUser(null);
      localStorage.removeItem("userID");
    }
  };

  // Kijelentkez√©s kezel≈ë f√ºggv√©ny
  const logoutUser = async () => {
    try {
      await Axios.post("http://localhost:5020/logout", {}, { withCredentials: true });
      setUser(null);
      localStorage.removeItem("userID");
      console.log("üü° Sikeres kijelentkez√©s");
    } catch (error) {
      console.error("Hiba t√∂rt√©nt a kijelentkez√©s sor√°n:", error);
      setUser(null);
      localStorage.removeItem("userID");
    }
  };

  return (
    <UserContext.Provider value={{ user, setUser, loginUser, logoutUser }}>
      {children}
    </UserContext.Provider>
  );
};

export default UserProvider;